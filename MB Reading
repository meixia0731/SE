(*
Name/Nature:
	FUN/BESS_MB_reading

Description:
	This function is used to map the raw data onto generic data:
	- data computing
	- scaling 
	- ...
	
Inputs:
	BESS structure

Outputs:
	BESS structure
	
Modifications:
	2021-01-06 : AFY - first issue
	2021-04-20 : ATF/NPZ - Adapted for EON
*)
// Read from array_read

BESS_1.Status_1 := io_device_OUT.array_read_result[1][1];
BESS_1.Start_Status := io_device_OUT.array_read_result[1][1].0; //Running
BESS_1.Starting_Status := io_device_OUT.array_read_result[1][1].1; //Starting
BESS_1.Stopping_Status := io_device_OUT.array_read_result[1][1].2; //Stopping
BESS_1.Stop_Status := io_device_OUT.array_read_result[1][1].3; //Stopped
BESS_1.Online_Status := io_device_OUT.array_read_result[1][1].4; //Online
BESS_1.Auto_Mode := io_device_OUT.array_read_result[1][1].5; //Auto Mode Active
BESS_1.Manual_Mode := io_device_OUT.array_read_result[1][1].6; //Manual Mode Active
BESS_1.Operator_Mode := io_device_OUT.array_read_result[1][1].7; //Operator Mode Active
BESS_1.AC_BC_Closed := io_device_OUT.array_read_result[1][1].8; //AC BC Closed (Not used)
BESS_1.Healthy := io_device_OUT.array_read_result[1][1].9; //Alarms healthy ready to start
BESS_1.Status_2 := io_device_OUT.array_read_result[1][2];
BESS_1.CTR_Active := io_device_OUT.array_read_result[1][2].12; //SCADA CTR Active
BESS_1.Heartbeat_HB := io_device_OUT.array_read_result[1][32];
BESS_1.Heartbeat_LB := io_device_OUT.array_read_result[1][32];
BESS_1.Active_Power_HB := io_device_OUT.array_read_result[2][1];
BESS_1.Active_Power_LB := io_device_OUT.array_read_result[2][2];
BESS_1.Reactive_Power_HB := io_device_OUT.array_read_result[2][3];
BESS_1.Reactive_Power_LB := io_device_OUT.array_read_result[2][4];
BESS_1.Frequency_HB := io_device_OUT.array_read_result[2][7];
BESS_1.Frequency_LB := io_device_OUT.array_read_result[2][8];
BESS_1.Apparent_Power_HB := io_device_OUT.array_read_result[2][9];
BESS_1.Apparent_Power_LB := io_device_OUT.array_read_result[2][10];
BESS_1.Voltage_V12_HB := io_device_OUT.array_read_result[2][13];
BESS_1.Voltage_V12_LB := io_device_OUT.array_read_result[2][14];
BESS_1.Voltage_V23_HB := io_device_OUT.array_read_result[2][15];
BESS_1.Voltage_V23_LB := io_device_OUT.array_read_result[2][16];
BESS_1.Voltage_V31_HB := io_device_OUT.array_read_result[2][17];
BESS_1.Voltage_V31_LB := io_device_OUT.array_read_result[2][18];
BESS_1.Voltage_average_HB := io_device_OUT.array_read_result[2][19];
BESS_1.Voltage_average_LB := io_device_OUT.array_read_result[2][20];
BESS_1.Current_I1_HB := io_device_OUT.array_read_result[2][21];
BESS_1.Current_I1_LB := io_device_OUT.array_read_result[2][22];
BESS_1.Current_I2_HB := io_device_OUT.array_read_result[2][23];
BESS_1.Current_I2_LB := io_device_OUT.array_read_result[2][24];
BESS_1.Current_I3_HB := io_device_OUT.array_read_result[2][25];
BESS_1.Current_I3_LB := io_device_OUT.array_read_result[2][26];
BESS_1.Current_average_HB := io_device_OUT.array_read_result[2][27];
BESS_1.Current_average_LB := io_device_OUT.array_read_result[2][28];
BESS_1.Max_Charge_Power_HB := io_device_OUT.array_read_result[3][1];
BESS_1.Max_Charge_Power_LB := io_device_OUT.array_read_result[3][2];
BESS_1.Max_Discharge_Power_HB := io_device_OUT.array_read_result[3][3];
BESS_1.Max_Discharge_Power_LB := io_device_OUT.array_read_result[3][4];
BESS_1.Voltage_DC_HB := io_device_OUT.array_read_result[3][33];
BESS_1.Voltage_DC_LB := io_device_OUT.array_read_result[3][34];
BESS_1.SOC_HB := io_device_OUT.array_read_result[4][1];
BESS_1.SOC_LB := io_device_OUT.array_read_result[4][2];
BESS_1.Alarm_Status := io_device_OUT.array_read_result[1][5]; //Bit 0 = 1 means at least one critical alarm is on. Bit 1 = 1 means at least one noncritical alarm is on.
BESS_1.Smoke_Alarm := io_device_OUT.array_read_result[1][8]; ////Bit 0 = 1 means smoke alarm is on.
BESS_1.SCADA_Lost_Comms_Al := io_device_OUT.array_read_result[1][9].11; //=1 means lost comms
BESS_1.PAct_01 := io_device_OUT.array_read_result[2][1];
BESS_1.PAct_02 := io_device_OUT.array_read_result[2][2];
BESS_1.QAct_01 := io_device_OUT.array_read_result[2][3];
BESS_1.QAct_02 := io_device_OUT.array_read_result[2][4];
BESS_1.FAct_01 := io_device_OUT.array_read_result[2][5];
BESS_1.FAct_02 := io_device_OUT.array_read_result[2][6];
BESS_1.Start_Command_Feedback := io_device_OUT.array_read_result[5][2];
BESS_1.Stop_Command_Feedback := io_device_OUT.array_read_result[5][3];
BESS_1.Alarm_Reset_Command_Feedback := io_device_OUT.array_read_result[5][4];
BESS_1.Auto_Command_Feedback := io_device_OUT.array_read_result[5][5];
BESS_1.Operator_Command_Feedback := io_device_OUT.array_read_result[5][6];
BESS_1.Enable_Power_Control_Cmd_Feedback := io_device_OUT.array_read_result[5][27];
BESS_1.Disable_Power_Control_Cmd_Feedback := io_device_OUT.array_read_result[5][28];
BESS_1.Active_Power_Setpoint_Feedback_01 := io_device_OUT.array_read_result[5][39];
BESS_1.Active_Power_Setpoint_Feedback_02 := io_device_OUT.array_read_result[5][40];


//conversion into IO_device_OUT strcuture
// System
// io_device_OUT.heartbeat := io_device_OUT.array_read_result[5][1];
IF BESS_1.SCADA_Lost_Comms_Al = 0 THEN;
	io_device_OUT.heartbeat := io_device_OUT.heartbeat + 1;
ELSE
	io_device_OUT.heartbeat := 0;
END_IF
// io_device_OUT.heartbeat := io_device_OUT.array_read_result[5][1];

// WORD03 := BESS_1.Heartbeat_HB;
// WORD04 := BESS_1.Heartbeat_LB;
// io_device_OUT.heartbeat := DINT_TO_INT(ValueDINT) * 1;


// io_device_OUT.healthy := NOT io_device_OUT.array_read_result[3][1].7;
IF BESS_1.Healthy = 1 THEN //No Alarms
	io_device_OUT.healthy := TRUE;
ELSE
	io_device_OUT.healthy := FALSE;
END_IF

// io_device_OUT.authorization_status:= TRUE; // MUST BE ADAPTED ! We need the Remote Status of BESS ...
IF BESS_1.Operator_Mode = 1 THEN //Operator Mode is on: battery is able to be remotely operated
	io_device_OUT.authorization_status:= TRUE;
ELSE
	io_device_OUT.authorization_status:= FALSE;
END_IF

// io_device_OUT.System_in_local := FALSE; //  MUST BE ADAPTED !
IF BESS_1.Auto_Mode = 1 OR BESS_1.Manual_Mode = 1 THEN
	io_device_OUT.System_in_local := TRUE; // Local is mode which we cannot operate battery
ELSE
	io_device_OUT.System_in_local := FALSE;
END_IF

// io_device_OUT.System_in_remote := TRUE;// MUST BE ADAPTED !
IF BESS_1.Operator_Mode = 1 THEN
	io_device_OUT.System_in_remote := TRUE; // Operator mode means we can operate the battery
ELSE
	io_device_OUT.System_in_remote := FALSE;
END_IF

// io_device_OUT.Start_status := io_device_OUT.array_read_result[3][1].9;
io_device_OUT.Start_status := BESS_1.Start_Status; // BESS is Running
// io_device_OUT.Stop_status := NOT io_device_OUT.array_read_result[3][1].9;
io_device_OUT.Stop_status := BESS_1.Stop_Status;
// Starting and Stopping status. Not sure if necessary
io_device_OUT.Starting_status := BESS_1.Starting_Status;
io_device_OUT.Stopping_status := BESS_1.Stopping_Status;


// // CSI/VSI mode with communication
// CASE io_device_OUT.array_read_result[1][1] OF
//     1026:
//         io_device_OUT.CSI_mode       := TRUE;
// 		io_device_OUT.VSI_mode       := FALSE;
//     1282: 
//         io_device_OUT.VSI_mode       := TRUE;
// 		io_device_OUT.CSI_mode       := FALSE;
//     ELSE
//         io_device_OUT.CSI_mode       := FALSE;
//         io_device_OUT.VSI_mode       := FALSE;
// END_CASE
// // CSI/VSI mode with HW signal
// // see James' email ...

// Forced to CSI Mode
io_device_OUT.CSI_mode       := TRUE;
io_device_OUT.VSI_mode       := FALSE;



// Measures
// READ WITH TCPSCANNER
// io_device_OUT.soc := GVL_BESS.BMAS_SOC/100.0;
WORD01 := BESS_1.SOC_HB;
WORD02 := BESS_1.SOC_LB;
io_device_OUT.soc := ValueFloat * 1;

// io_device_OUT.Energy_max := GVL_BESS.BESS_array[1].Energy_nominal;
// io_device_OUT.Energy_discharged_cum_DC := GVL_BESS.BMAS_Energy_discharge_cum_HI * 65536 + GVL_BESS.BMAS_Energy_discharge_cum_LO ;
// io_device_OUT.Energy_charged_cum_DC :=GVL_BESS.BMAS_Energy_charge_cum_HI * 65536 + GVL_BESS.BMAS_Energy_charge_cum_LO ;
io_device_OUT.Energy_max := GVL_BESS.BESS_array[1].Energy_nominal;
io_device_OUT.Energy_discharged_cum_DC := GVL_BESS.BMAS_Energy_discharge_cum_HI * 65536 + GVL_BESS.BMAS_Energy_discharge_cum_LO ;
io_device_OUT.Energy_charged_cum_DC :=GVL_BESS.BMAS_Energy_charge_cum_HI * 65536 + GVL_BESS.BMAS_Energy_charge_cum_LO ;

// io_device_OUT.Max_charge_power := GVL_BESS.BESS_array[1].Power_max; // MUST BE ADAPTED ! Comes from BMS
WORD01 := BESS_1.Max_Charge_Power_HB;
WORD02 := BESS_1.Max_Charge_Power_LB;
io_device_OUT.Max_charge_power := ValueFloat * 1;

// io_device_OUT.Max_discharge_power := GVL_BESS.BESS_array[1].Power_max; // MUST BE ADAPTED ! Comes from BMS
WORD01 := BESS_1.Max_Discharge_Power_HB;
WORD02 := BESS_1.Max_Discharge_Power_LB;
io_device_OUT.Max_discharge_power := ValueFloat * 1;

// io_device_OUT.Active_Power := io_device_OUT.array_read_result[2][15] / 1000.0;
WORD01 := BESS_1.Active_Power_HB;
WORD02 := BESS_1.Active_Power_LB;
io_device_OUT.Active_Power := ValueFloat * 1;

// io_device_OUT.Reactive_Power := io_device_OUT.array_read_result[2][16] / 1000.0;
WORD01 := BESS_1.Reactive_Power_HB;
WORD02 := BESS_1.Reactive_Power_LB;
io_device_OUT.Reactive_Power := ValueFloat * 1;

// io_device_OUT.Apparent_power := io_device_OUT.array_read_result[2][17] / 1000.0;
WORD01 := BESS_1.Apparent_Power_HB;
WORD02 := BESS_1.Apparent_Power_LB;
io_device_OUT.Apparent_power := ValueFloat * 1;

// io_device_OUT.frequency := io_device_OUT.array_read_result[2][1] / 1000.0;
WORD01 := BESS_1.Frequency_HB;
WORD02 := BESS_1.Frequency_LB;
io_device_OUT.frequency := ValueFloat * 1;

// io_device_OUT.Voltage_DC := io_device_OUT.array_read_result[4][1] * 1.0;
WORD01 := BESS_1.Voltage_DC_HB;
WORD02 := BESS_1.Voltage_DC_LB;
io_device_OUT.Voltage_DC := ValueFloat * 1;

// io_device_OUT.Voltage_V12 := io_device_OUT.array_read_result[2][5] * 1.0;
WORD01 := BESS_1.Voltage_V12_HB;
WORD02 := BESS_1.Voltage_V12_LB;
io_device_OUT.Voltage_V12 := ValueFloat * 1.0;

// io_device_OUT.Voltage_V23 := io_device_OUT.array_read_result[2][6] * 1.0;
WORD01 := BESS_1.Voltage_V23_HB;
WORD02 := BESS_1.Voltage_V23_LB;
io_device_OUT.Voltage_V23 := ValueFloat * 1;

// io_device_OUT.Voltage_V31 := io_device_OUT.array_read_result[2][7] * 1.0;
WORD01 := BESS_1.Voltage_V31_HB;
WORD02 := BESS_1.Voltage_V31_LB;
io_device_OUT.Voltage_V31 := ValueFloat * 1;

// io_device_OUT.Current_I1 := io_device_OUT.array_read_result[2][11] / 10.0;
WORD01 := BESS_1.Current_I1_HB;
WORD02 := BESS_1.Current_I1_LB;
io_device_OUT.Current_I1 := ValueFloat * 1;

// io_device_OUT.Current_I2 := io_device_OUT.array_read_result[2][12] / 10.0;
WORD01 := BESS_1.Current_I2_HB;
WORD02 := BESS_1.Current_I2_LB;
io_device_OUT.Current_I2 := ValueFloat * 1;

// io_device_OUT.Current_I3 := io_device_OUT.array_read_result[2][13] / 10.0;
WORD01 := BESS_1.Current_I3_HB;
WORD02 := BESS_1.Current_I3_LB;
io_device_OUT.Current_I3 := ValueFloat * 1;

// io_device_OUT.Check_active_power_setpoint := io_device_OUT.Active_Power; // MUST BE ADAPTED ! 
WORD01 := BESS_1.Active_Power_Setpoint_Feedback_01;
WORD02 := BESS_1.Active_Power_Setpoint_Feedback_02;
io_device_OUT.Check_active_power_setpoint := ValueFloat;

// // Measures
// // READ WITH TCPSCANNER
// io_device_OUT.Check_active_power_setpoint := io_device_OUT.Active_Power; // MUST BE ADAPTED ! 
// io_device_OUT.Check_frequency_setpoint := io_device_OUT.frequency; // MUST BE ADAPTED ! 
// io_device_OUT.Current_DC := io_device_OUT.array_read_result[4][14] * 0.1;
